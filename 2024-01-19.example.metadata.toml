# Mandatory Keys

[owner]
name = 'Guido Incognito'
contact = 'mail@incogni.to'

[access]
access-control = '1_public'

[meta]
title = "An Example Dataset"
description = """
Just some example data. Actually this file is only used, to act as an
example of what the metadata TOML file looks like.
"""


format = "netCDF"



# TODO: Thinking about this, I noticed that the format should actually
#       be defined via the file extensions. So what information would
#       this field contain, that couldn't be obtained by extensions like
#       `.csv`, `.json`, `.nc`?
#       OTH, `.nc` is already a quite cryptic file extension, so making
#       sure that it's netCDF and not some other weird format that has
#       the `.nc` file extension seems like a good idea. Also, one could
#       use this to specify that a `.zip` file contains a "Data Package"
#       or that a folder contains a "Git Repository".
#       I'd also recommend making `format.name` mandatory. Then one
#       would have the option to also specify sources for further
#       information on the format:
#
#         format.name = "Data Package"
#         format.url = "https://specs.frictionlessdata.io/data-package/"


# Optional Fields


[timeinterval]
start = 1970-01-01 00:00:00Z
stop = 2024-12-02 20:24:12+02:00
# begin/end, left/right, alpha/omega, α/ω, Α/Ω ?
resolution = "15 min"


# This is my proposal on how to handle complex cases: allow optional
# tables for each file, specified with a relative path, to override
# metadata items on a per file basis. The path will be interpreted as
# being rooted at the directory, to which the metadata file applies. No
# `..`s allowed in the path.
["foo/bar/file.one"]
owner.name = "Foo Bar"
owner.contact = "foo@bar.foobar"
format.name = "The hilarious foobar format."

# Last but not least: maybe we want to allow people to specify directory
# metadata with a `.hyBit-metadata.toml` file inside the directory? This
# would lead to less clutter and the file can be versioned, if the
# directory contains a Git repository.

# This is my last proposal. Sorry for making this so long again. I tend
# to overengineer when not kept in check.
